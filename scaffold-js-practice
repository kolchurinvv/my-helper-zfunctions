print_usage(){
  echo "Usage:  scaffold-practice [-flags] <dirName> <functionName> <variables>\n" 2>&1
  echo '  <dirName> - required, specify the name of a new directory to be created (name of the problem) inside ~/Dev_Projects/Toptal_test_prep'
  echo '  <functionName> - required, specify the name of the function'
  echo '  <variables> - required, comma separated, no whte spaces characters used in the problem for input variables'
  echo '\n [-flags]:'
  echo '   -h   prints out this message'
  echo '   -n   prevents Nodemon from launhing automatically'
}

while getopts ':hnd' flag; do
  case "${flag}" in
    h)
      print_usage
      return 0;;
    n)
      isFlagged='true'
      useNodemon='false';;
    d)
      isFlagged='true'
      debuggingMode='ON';;
    # :)
    #   echo "$0:Must supply <dirName> <functionName> <variables>\n" >&2
    #   print_usage
    #   return 1;;
    ?)
      printf "Invalid option: -${OPTARG}.\n\n" >&2
      print_usage
      return 1;;
  esac
done

if [[ $isFlagged == 'true' ]]; then
  shift
fi

dirName=${1}
functionName=${2}
variables=${3}


if [[ $debuggingMode == 'ON' ]]; then
  echo '\n\n######################### Debugging mode ON #########################\n\n'
  echo "is flagged: ${isFlagged}"
  echo "dirName is: \"${dirName}\" vs the \${1}: \"${1}\""
  echo "functionName is: \"${functionName}\" vs the \${2}: \"${2}\""
  echo "variables are: \"${variables}\" vs the \${3}: \"${3}\""
  echo '\n\n######################### end of debugging messages #########################\n\n'
  return
fi

if [[ ${#} -lt 3 ]]; then
  echo 'Must specify <dirName>, <functionName> and <variables>\n\n'
  print_usage
  return 1
fi

isUniqueName(){
  DIRECTORYEXISTS=$(basename $(find ~/Dev_Projects/Toptal_test_prep -type d  -name ${dirName})) >/dev/null 2>&1
  if [[ $DIRECTORYEXISTS = '' ]];
    then
      return 0
    else
      return 1
  fi
}
# TODO: #8 incorrect exit on existing dirName
while true; do
  isUniqueName
  if [[ ${?} -ne 0 ]]; then
    echo "Folder '${dirName}' already exists. Folder names must be unique."
    dirName=Â 
    read  dirName'?Please enter new folder name: '
    isUniqueName
    if [[ ${?} -eq 0 ]]; then
      break
    fi
  else
    break
  fi
done

mkdir ~/Dev_Projects/coding_practice/"$dirName"
cd ~/Dev_Projects/coding_practice/"$dirName"
echo 'line one
line two
line3 with more elements' >> input.txt
echo '{
  "main": "index.js",
  "type": "module"
}' >> package.json
echo 'import { readFileSync } from "fs";

let input = readFileSync("input.txt", "utf8", (err, data) => {
  if (!!err) {
    console.error(err);
  }
  return data;
}).toString()
  .replace(/\B\s+/gm, "")           // replace preceding empty spaces and lines with ""
  .split("\\n")                     // split into `line` arrays
  .map((line) => line.split(" "));  // on each `line` split based on spaces

let ['$variables'] = input;

function '$functionName'('$variables') {
  return {'$variables'}
}
console.time("'$functionName'");
console.log('$functionName'('$variables'));
console.timeEnd("'$functionName'");
' >> index.js
npm install
code -g index.js:16:3 .
if [[ $useNodemon == 'false' ]]; then
  return 0
fi
# TODO: #2 find a way to push this into the integrated terminal in VScode
nodemon -e "js, txt" -w
return 0