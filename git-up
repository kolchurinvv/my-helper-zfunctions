print_usage(){
  echo 'Usage:  git-up [-flags] <remote-branch-name> "commit message"\n' 2>&1
  echo '  git-up - add all files, commit with a meassage and push the current branch to a <remote-branch-name>.'
  echo '  "commit message" - message assigned to the commit'
  echo '\n [-flags]:'
  echo '    -h    prints out this message'
  echo '    -p    Previous. Uses the last commit; "commit message" argument is skipped'
  echo '    -s    Same (branches). Pushes changes to the branch with the same name as the current one. <remote-branch-name> ignored'
}

identicalBranchNames(){
  remoteBranchName=$(git branch | awk '{print $2}')
}
getLastCommitMessage(){
   message=$(git log -1 --pretty=%B) >&1
}
message=
remoteBranchName=
isFlagged='false'
useLastCommit='false'

while getopts ':hps' flag; do
  case "${flag}" in
    h)
      print_usage
      return 0;;
    p)
      isFlagged='true'
      useLastCommit='true'
      getLastCommitMessage;;
    s)
      isFlagged='true'
      sameBranch='true'
      identicalBranchNames
      message=${2}
      if [[ ${@} =~ 'p' ]];then
        useLastCommit='true'
        getLastCommitMessage
      fi
      if [ ${#} -lt 2 -a $useLastCommit == 'false' ];
        then
          echo "Error: $1 flag must have a 'commit message' or use with -p flag" >&2
          message=
          return 1
      fi;;
    *)
      printf "Invalid option: -${OPTARG}.\n\n" >&2
      print_usage
      return 1;;
  esac
done

if [[ $isFlagged == 'true' ]]; then
  shift
fi

if [ ${#} -lt 1 -a $isFlagged == 'false' ]; then
  echo "Error: must specify flags/arguments.\n" >&2
  print_usage
  return 1
fi

if [ $isFlagged == 'false' -a  ${#} -lt 2 ]; then
  echo 'Error: must provide <remote-branch-name> and "message".\n'
  print_usage
  return 1
fi

if [ $isFlagged == 'false' -a ${#} -eq 2 ]; then
  remoteBranchName=${1}
  message=${2}
fi

echo $remoteBranchName $message

git add . -v
if [ $useLastCommit == 'false' ]; then
  git commit -m "$message"
fi
if [ $sameBranch == 'true' ];
  then
    git push origin $remoteBranchName:$remoteBranchName
  else
    git push origin `git branch | awk '{print $2}'`:"$remoteBranchName"
fi
# some test changes