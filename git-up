print_usage() {
  echo 'Usage:  git-up [-flags] <remote-branch-name> "commit message"\n' 2>&1
  echo '  git-up - add all files, commit with a meassage and push the current branch to a <remote-branch-name>.'
  echo '  "commit message" - message assigned to the commit'
  echo '\n [-flags]:'
  echo '    -h    prints out this message'
  echo '    -p    Previous. Uses the last commit; "commit message" argument is skipped'
  echo '    -s    Same (branches). Pushes changes to the branch with the same name as the current one. <remote-branch-name> ignored'
  echo '    -u    push to upstream branch'
  echo '    -d    Debugging mode ON'
  echo "    -A    Commit only staged files, don't Add All files"
}

message=
remoteBranchName=
isFlagged='false'
useLastCommit='false'
debuggingMode='OFF'
sameBranch='false'
upstreamBranch=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null | sed 's/[^\/]*\///')
NoAddAllFiles='false'

while getopts ':hpsudA' flag; do
  case "${flag}" in
  h)
    print_usage
    return 0
    ;;
  p)
    isFlagged='true'
    useLastCommit='true'
    if [[ ${1} =~ 's' ]]; then
      remoteBranchName=$(git branch | awk '$0 ~ /\*/ { print $2}')
    elif [[ ${1} =~ 'u' ]]; then
      remoteBranchName=$upstreamBranch
    else
      remoteBranchName=${2}
    fi
    ;;
  s)
    isFlagged='true'
    sameBranch='true'
    remoteBranchName=$(git branch | awk '$0 ~ /\*/ { print $2}')
    if [[ ${1} =~ 'p' ]]; then
      useLastCommit='true'
    else
      message=${2}
    fi
    if [[ ${#} -lt 2 && $useLastCommit == 'false' ]]; then
      echo "Error: $1 flag must have a 'commit message' or use with -p flag" >&2
      message=
      return 1
    fi
    ;;
  u)
    isFlagged='true'
    if [[ ${1} =~ 's' ]]; then
      sameBranch='true'
    else
      sameBranch='false'
    fi
    remoteBranchName=$upstreamBranch
    if [[ ${1} =~ 'p' ]]; then
      useLastCommit='true'
    else
      message=${2}
    fi
    if [[ ${#} -lt 2 && $useLastCommit == 'false' ]]; then
      echo "Error: $1 flag must have a 'commit message' or use with -p flag" >&2
      message=
      return 1
    fi
    ;;
  d)
    isFlagged='true'
    debuggingMode='ON'
    ;;
  A)
    NoAddAllFiles='true'
    ;;
  *)
    printf "Invalid option: -${OPTARG}.\n\n" >&2
    print_usage
    return 1
    ;;
  esac
done

if [[ $debuggingMode == 'ON' ]]; then
  flags=${1}
  # remoteBranchName=${2}
  echo "# params: ${#}"
  echo "{@} params: ${@}"
  echo "message: ${message}"
  # meassage=${3}
fi
if [[ $isFlagged == 'true' ]]; then
  shift
fi
if [[ ${#} -lt 1 && $isFlagged == 'false' ]]; then
  echo "Error: must specify flags/arguments.\n" >&2
  print_usage
  return 1
fi

if [[ ${#} -lt 2 && $isFlagged == 'false' ]]; then
  echo 'Error: must provide <remote-branch-name> and "message".\n'
  print_usage
  return 1
fi
# debugging if statement
# if [[ $isFlagged == 'false' ]]; then
#   echo "shifting params if already hasn't by the isFlagged check"
#   shift
# fi
# echo "# params: ${#}"
# echo "is flagged: ${isFlagged}"
# if [[ ${#} -eq 2 ]]; then
#   echo '2 params'
# fi
if [[ $isFlagged == 'false' && ${#} -ge 2 ]]; then
  remoteBranchName=${1}
  message=${2}
fi
if [[ $isFlagged == 'true' && $debuggingMode == 'ON' && ${#} -ge 2 ]]; then
  remoteBranchName=${1}
  message=${2}
fi

if [[ $debuggingMode == 'ON' ]]; then
  echo '\n\n######################### Debugging mode ON #########################\n\n'
  echo "WARNING: Debugging mode disabpled 'git push' command\n"
  echo "parsed flags: ${flags}"
  echo "local active branch name parsed as: $(git branch | awk '$0 ~ /\*/ { print $2}')"
  echo "use the same branch name: ${sameBranch}"
  echo "remoteBranchName is: ${remoteBranchName}"
  echo "upstream branch name is: ${upstreamBranch}"
  echo "don't add all files flag: ${NoAddAllFiles}"
  if [[ $NoAddAllFiles == 'true' ]]; then
    echo -e "\tListing staged files:"
    printf "\t\033[32m%s\033[0m\n" $(git diff --name-only --cached)
  fi
  echo "message: ${message}"
  echo "use last commit: ${useLastCommit}"
  echo "is flagged: ${isFlagged}"
  echo '\n\n######################### end of debugging messages #########################\n\n'
  return
fi
if [[ $NoAddAllFiles == 'true' ]]; then
  echo 'Uploading files:'
  printf "\033[32m%s\033[0m\n" $(git diff --name-only --cached)
else
  git add . -A -v
fi

if [[ $useLastCommit == 'false' ]]; then
  git commit -m "$message"
fi

if [[ $sameBranch == 'true' ]]; then
  git push -u origin $remoteBranchName:$remoteBranchName
else
  git push -u origin $(git branch | awk '{print $2}'):$remoteBranchName
fi
