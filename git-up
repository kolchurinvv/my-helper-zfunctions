print_usage(){
  echo 'Usage:  git-up [-flags] <remote-branch-name> "commit message"\n' 2>&1
  echo '  git-up - add all files, commit with a meassage and push the current branch to a <remote-branch-name>.'
  echo '  "commit message" - message assigned to the commit'
  echo '\n [-flags]:'
  echo '    -h    prints out this message'
  echo '    -p    Previous. Uses the last commit; "commit message" argument is skipped'
  echo '    -s    Same (branches). Pushes changes to the branch with the same name as the current one. <remote-branch-name> ignored'
  echo '    -d    Debugging mode ON'
}

message=
remoteBranchName=
isFlagged='false'
useLastCommit='false'
debugginMode='OFF'

while getopts ':hpsd' flag; do
  case "${flag}" in
    h)
      print_usage
      return 0;;
    p)
      isFlagged='true'
      useLastCommit='true'
      remoteBranchName=${2};;
    s)
      isFlagged='true'
      sameBranch='true'
      remoteBranchName=$(git branch | awk '{print $2}')
      message=${2}
      if [[ ${1} =~ 'p' ]];then
        useLastCommit='true'
      fi
      if [ ${#} -lt 2 -a $useLastCommit == 'false' ];
        then
          echo "Error: $1 flag must have a 'commit message' or use with -p flag" >&2
          message=
          return 1
      fi;;
    d)
      isFlagged='true'
      debugginMode='ON';;
    *)
      printf "Invalid option: -${OPTARG}.\n\n" >&2
      print_usage
      return 1;;
  esac
done

if [[ $isFlagged == 'true' ]]; then
  shift
fi

if [ ${#} -lt 1 -a $isFlagged == 'false' ]; then
  echo "Error: must specify flags/arguments.\n" >&2
  print_usage
  return 1
fi

if [ $isFlagged == 'false' -a  ${#} -lt 2 ]; then
  echo 'Error: must provide <remote-branch-name> and "message".\n'
  print_usage
  return 1
fi

if [ $isFlagged == 'false' -a ${#} -eq 2 ]; then
  remoteBranchName=${1}
  message=${2}
fi

if [[ $debugginMode == 'ON' ]]; then
  echo '\n\n######################### Debugging mode ON #########################\n\n'
  echo "remote branch: $(git branch | awk '{gsub("\* ","s"); print}')"
  echo "message: ${message}"
  echo "use last commit: ${useLastCommit}"
  echo "is flagged: ${isFlagged}"
  echo '\n\n######################### end of debugging messages #########################\n\n'
fi

git add . -v
if [ $useLastCommit == 'false' ]; then
  git commit -m "$message"
fi
if [[ $sameBranch == 'true' ]];
  then
    echo "same branch is ${sameBranch}; ${remoteBranchName}"
    # git push origin $remoteBranchName:$remoteBranchName
  else
    echo "different branches ${remoteBranchName}"
    git push origin `git branch | awk '{print $2}'`:"$remoteBranchName"
fi